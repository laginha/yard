{"name":"Yard","tagline":"Yet Another Restful Django Framework","body":"*Yard* is an API oriented framework that aims to simplify the developer's work when implementing complex API design*. It provides a neat, familiar and easy way to control the logic for acceptable parameters in each `http-GET-request`.\r\n\r\n## Motivations\r\n\r\nWhile working with a fairly complex project, with equally complex API design, *Django forms* might not be enough for what you need. To avoid having too much code on the resources files validating the input parameters, we started to develop our own resources, inspired by the [Dagny](https://github.com/zacharyvoase/dagny) project, that would relieve the views from the ugliness of input validations.\r\n\r\nWith a few extra inspirations, *Yard* was born.\r\n\r\nOther frameworks and applications, more mature and solid, such as [Django-Piston](https://bitbucket.org/jespern/django-piston/wiki/Home), [Tastypie](http://django-tastypie.readthedocs.org/en/latest/) or [Django-Rest-Framework](http://django-rest-framework.org/) can be enough for most needs. But we believe *Yard* brings something new. In the end, we're just having fun really and keeping it simple.\r\n\r\n## Installation\r\n\r\nWe recommend using [virtual environments](https://python-guide.readthedocs.org/en/latest/dev/virtualenvs/) to manage the Python libraries you want to use, either with [Pythonbrew](https://github.com/utahta/pythonbrew) or [virtualenv](http://www.virtualenv.org/).\r\n\r\nIf you use or want to use virtual environments, then after creating one and starting to use it, you can just run the following on the command line:\r\n\r\n<pre>\r\n pip install yard-framework\r\n</pre>\r\n\r\nIf you don't want to use virtual environments, you can just [install pip](http://pypi.python.org/pypi/pip) and then run the command above.\r\n\r\n\r\n## Usage\r\n\r\nEach of your `API URL` (in `urls.py`) should point to the respective resource.\r\n\r\n*urls.py*\r\n```python\r\nfrom django.conf.urls.defaults import patterns, include, url\r\nfrom views                     import Books\r\nfrom yard.urls                 import include_resource\r\n\r\nurlpatterns = patterns('django_yard.app.views.',\r\n    url( r'^books', include_resource( Books ) ),\r\n)\r\n```\r\n\r\nFor input validation, you should create a form for your resource in `params.py`.\r\n\r\n*params.py*\r\n```python\r\nfrom yard.forms import *    \r\n\r\nclass BookParameters(Form):\r\n    year   = IntegerParam( \r\n                 alias='publication_date_year',\r\n                 min=1970,\r\n                 max=2012\r\n             )\r\n    title  = CharParam( required=True )\r\n    genre  = CharParam( alias='genres' )\r\n    author = CharParam( alias='author__id' )\r\n    house  = CharParam( alias='publishing_house__id' ) \r\n\r\n    # __logic__ sets which attributes are required (and how)\r\n    __logic_ = year, title, genre & (author|house)\r\n```\r\n\r\nFinally, you set the desired views for each created resource\r\n\r\n*views.py*\r\n```python\r\nfrom yard.resources import Resource\r\nfrom models         import Book\r\n\r\nclass Books(Resource):\r\n    # used in the index method\r\n    parameters = BookParameters\r\n    # used in the index and show methods\r\n    fields = (\r\n               'id',\r\n               'title',\r\n               'publication_date',\r\n               'genres', (\r\n                   'author', (\r\n                       'name',\r\n                       'age',\r\n                   )\r\n               )\r\n    )\r\n    \r\n    # index's response metadata\r\n    class Meta:\r\n        maximum = (('longest_title', 'title'),)\r\n        average = (('average_pages', 'number_of_pages'),)\r\n    \r\n    # index's pagination configuration  \r\n    class Page:\r\n        offset_parameter = 'offset'\r\n        results_per_page = {\r\n            'parameter': 'results',\r\n            'default': 25,\r\n            'limit': 50,\r\n        }\r\n\r\n    def index(self, request, params):\r\n        #GET /resource/\r\n        return Book.objects.filter( **params )\r\n\r\n    def show(self, request, book_id):\r\n        #GET /resource/:id/\r\n        return Book.objects.get( id=book_id )\r\n\r\n    def create(self, request):\r\n        #POST /resource/\r\n        return 401, 'You are not authorize'\r\n\r\n    def update(self, request, book_id):\r\n        #PUT /resource/:id/\r\n        ...\r\n\r\n    def destroy(self, request, book_id):\r\n        #DELETE /resource/:id/\r\n        ...\r\n```\r\n\r\nFor more details on how to use this project, please check the **[Github page](https://github.com/laginha/yard)**","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}